#16位合并方法
into method label B1B2 remove_entry;
into definitionblock code_regex . insert
begin
Method (B1B2, 2, NotSerialized)\n
{\n
Return(Or(Arg0, ShiftLeft(Arg1, 8)))\n
}\n
end;
#32位合并方法
into method label B1B4 remove_entry;
into definitionblock code_regex . insert
begin
Method (B1B4, 4, NotSerialized)\n
{\n
    Store(Arg3, Local0)\n
    Or(Arg2, ShiftLeft(Local0, 8), Local0)\n
    Or(Arg1, ShiftLeft(Local0, 8), Local0)\n
    Or(Arg0, ShiftLeft(Local0, 8), Local0)\n
    Return(Local0)\n
}\n
end;
#大于32位偏移计算
# utility methods to read/write buffers from/to EC
into method label RE1B parent_label EC0 remove_entry;
into method label RECB parent_label EC0 remove_entry;
into device label EC0 insert
begin
Method (RE1B, 1, NotSerialized)\n
{\n
    OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n
    Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n
    Return(BYTE)\n
}\n
Method (RECB, 2, Serialized)\n
// Arg0 - offset in bytes from zero-based EC\n
// Arg1 - size of buffer in bits\n
{\n
    ShiftRight(Arg1, 3, Arg1)\n
    Name(TEMP, Buffer(Arg1) { })\n
    Add(Arg0, Arg1, Arg1)\n
    Store(0, Local0)\n
    While (LLess(Arg0, Arg1))\n
    {\n
        Store(RE1B(Arg0), Index(TEMP, Local0))\n
        Increment(Arg0)\n
        Increment(Local0)\n
    }\n
    Return(TEMP)\n
}\n
end;
#16位拆分
#B1RC DCRC DCRD
into device label EC0 code_regex B1RC,\s+16, replace_matched begin DCRC, 8, DCRD, 8, end;
into method label _BST code_regex \(B1RC, replaceall_matched begin (B1B2(DCRC, DCRD), end;
#B1FV DCFV DCFW
into device label EC0 code_regex B1FV,\s+16, replace_matched begin DCFV, 8, DCFW, 8, end;
into method label _BST code_regex \(B1FV, replaceall_matched begin (B1B2(DCFV, DCFW), end;
#B1DV DCDV DCDW
into device label EC0 code_regex B1DV,\s+16, replace_matched begin DCDV, 8, DCDW, 8, end;
into method label _BIF code_regex \(B1DV, replaceall_matched begin (B1B2(DCDV, DCDW), end;
#B1DC DCDC DCDD
into device label EC0 code_regex B1DC,\s+16, replace_matched begin DCDC, 8, DCDD, 8, end;
into method label _BIF code_regex \(B1DC, replaceall_matched begin (B1B2(DCDC, DCDD), end;
#B1FC DCFC DCFD
into device label EC0 code_regex B1FC,\s+16, replace_matched begin DCFC, 8, DCFD, 8, end;
into method label _BIF code_regex \(B1FC, replaceall_matched begin (B1B2(DCFC, DCFD), end;
#B1AC DCAC DCAD
into device label EC0 code_regex B1AC,\s+16, replace_matched begin DCAC, 8, DCAD, 8, end;
into method label _BST code_regex \(B1AC, replaceall_matched begin (B1B2(DCAC, DCAD), end;
#64
#FWBT
into method label MHIF code_regex \(FWBT, replaceall_matched begin (RECB(0x1D,64), end;
into method label GBID code_regex \(FWBT, replaceall_matched begin (RECB(0x1D,64), end;
#256
#SMDA
into method label MHPF code_regex \(SMDA, replaceall_matched begin (RECB(0x85,256), end;
into method label CFUN code_regex \(SMDA, replaceall_matched begin (RECB(0x85,256), end;
##########向EC里写数据的方法
into method label WE1B parent_label H_EC remove_entry;
into method label WECB parent_label H_EC remove_entry;
into device label H_EC insert
begin
Method (WE1B, 2, NotSerialized)\n
{\n
    OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n
    Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n
    Store(Arg1, BYTE)\n
}\n
Method (WECB, 3, Serialized)\n
// Arg0 - offset in bytes from zero-based EC\n
// Arg1 - size of buffer in bits\n
// Arg2 - value to write\n
{\n
    ShiftRight(Arg1, 3, Arg1)\n
    Name(TEMP, Buffer(Arg1) { })\n
    Store(Arg2, TEMP)\n
    Add(Arg0, Arg1, Arg1)\n
    Store(0, Local0)\n
    While (LLess(Arg0, Arg1))\n
    {\n
        WE1B(Arg0, DerefOf(Index(TEMP, Local0)))\n
        Increment(Arg0)\n
        Increment(Local0)\n
    }\n
}\n
end;